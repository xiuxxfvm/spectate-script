local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

local players = {}
local currentIndex = 1 

-- GUI Creation
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local BlurEffect = Instance.new("ImageLabel") 
local NameLabel = Instance.new("TextLabel")
local PrevButton = Instance.new("TextButton")
local NextButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local ButtonCorner = Instance.new("UICorner")
local GlowEffect = Instance.new("ImageLabel")

ScreenGui.Parent = player:WaitForChild("PlayerGui")

-- Frame (Glassmorphism)
Frame.Size = UDim2.new(0.4, 0, 0.12, 0)
Frame.Position = UDim2.new(0.3, 0, 0.85, 0)
Frame.BackgroundTransparency = 0.4
Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui

-- Rounded corners for Frame
UICorner.CornerRadius = UDim.new(0.25, 0)
UICorner.Parent = Frame

-- Blurred Background
BlurEffect.Size = UDim2.new(1, 0, 1, 0)
BlurEffect.Position = UDim2.new(0, 0, 0, 0)
BlurEffect.BackgroundTransparency = 1
BlurEffect.Image = "rbxassetid://2917743729" -- Soft Blur Effect
BlurEffect.ImageTransparency = 0.4
BlurEffect.Parent = Frame

-- Glow Effect (Subtle Neon)
GlowEffect.Size = UDim2.new(1.2, 0, 1.4, 0)
GlowEffect.Position = UDim2.new(-0.1, 0, -0.2, 0)
GlowEffect.BackgroundTransparency = 1
GlowEffect.Image = "rbxassetid://4695575679" -- Glow Effect
GlowEffect.ImageColor3 = Color3.fromRGB(0, 170, 255)
GlowEffect.ImageTransparency = 0.7
GlowEffect.Parent = Frame

-- Name label
NameLabel.Size = UDim2.new(0.7, 0, 1, 0)
NameLabel.Position = UDim2.new(0.15, 0, 0, 0)
NameLabel.BackgroundTransparency = 1
NameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
NameLabel.TextScaled = true
NameLabel.Font = Enum.Font.GothamBold
NameLabel.Text = "Loading..."
NameLabel.Parent = Frame

-- Buttons (Neon Glow)
local function createButton(btn, text, pos)
    btn.Size = UDim2.new(0.15, 0, 1, 0)
    btn.Position = pos
    btn.Text = text
    btn.TextScaled = true
    btn.Font = Enum.Font.GothamBold
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.AutoButtonColor = false
    btn.Parent = Frame

    -- Rounded corners
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0.2, 0)
    btnCorner.Parent = btn

    -- Button hover animation
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(0, 170, 255)}):Play()
    end)
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
    end)
end

-- Create buttons
createButton(PrevButton, "<", UDim2.new(0, 0, 0, 0))
createButton(NextButton, ">", UDim2.new(0.85, 0, 0, 0))

-- Function to update player list
local function updatePlayerList()
    players = {player} 
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= player then
            table.insert(players, p)
        end
    end
end

-- Directional slide animation with fade effect
local function slideText(newName, direction)
    local offset = (direction == "left") and -0.2 or 0.2 -- "<" slides left, ">" slides right
    local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

    -- Fade Out & Slide
    local fadeOut = TweenService:Create(NameLabel, tweenInfo, {TextTransparency = 1, Position = UDim2.new(0.15 + offset, 0, 0, 0)})
    fadeOut:Play()
    fadeOut.Completed:Wait()

    -- Update text & reset position
    NameLabel.Text = newName
    NameLabel.Position = UDim2.new(0.15 - offset, 0, 0, 0)

    -- Fade In & Slide back
    local fadeIn = TweenService:Create(NameLabel, tweenInfo, {TextTransparency = 0, Position = UDim2.new(0.15, 0, 0, 0)})
    fadeIn:Play()
end

-- Function to update spectated player
local function updateUser(direction)
    local targetPlayer = players[currentIndex]
    slideText(targetPlayer.Name, direction)

    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        camera.CameraSubject = targetPlayer.Character.HumanoidRootPart
    end
end

-- UI Fade In & Out Animation
local function fadeUI(visible)
    local transparency = visible and 0 or 1
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

    TweenService:Create(Frame, tweenInfo, {BackgroundTransparency = transparency}):Play()
    TweenService:Create(BlurEffect, tweenInfo, {ImageTransparency = transparency + 0.4}):Play()
    TweenService:Create(NameLabel, tweenInfo, {TextTransparency = transparency}):Play()
    TweenService:Create(PrevButton, tweenInfo, {TextTransparency = transparency, BackgroundTransparency = transparency}):Play()
    TweenService:Create(NextButton, tweenInfo, {TextTransparency = transparency, BackgroundTransparency = transparency}):Play()
end

-- Button events with direction
PrevButton.MouseButton1Click:Connect(function()
    fadeUI(false) -- Fade out
    wait(0.2)
    currentIndex = (currentIndex - 2) % #players + 1
    updateUser("left") -- Slide to the left (text moves right to left)
    fadeUI(true) -- Fade in
end)

NextButton.MouseButton1Click:Connect(function()
    fadeUI(false) -- Fade out
    wait(0.2)
    currentIndex = currentIndex % #players + 1
    updateUser("right") -- Slide to the right (text moves left to right)
    fadeUI(true) -- Fade in
end)

-- Refresh player list and set initial spectating target
updatePlayerList()
updateUser("right")

-- Update player list when someone joins/leaves
Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)
